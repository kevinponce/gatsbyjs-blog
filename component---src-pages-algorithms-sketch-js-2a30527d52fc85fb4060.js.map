{"version":3,"sources":["webpack:///./src/pages/algorithms/sketch.js"],"names":["App","render","Component"],"mappings":"yKA6MqBA,E,gLAEnBC,OAAA,WACE,OAAO,sC,GAHsBC","file":"component---src-pages-algorithms-sketch-js-2a30527d52fc85fb4060.js","sourcesContent":["/*function randomColor(p) {\n  const colors = [p.color(105,210,231), p.color(249,212,35), p.color(243,134,48), p.color(255,78,80)];\n\n  return colors[parseInt((colors.length)* Math.random())];\n}\n\nlet animations = [];\nlet mem = [];\n\nexport default function(p) {\n  const height = 1720;\n  const width = 700;\n  let array = [];\n  let path = []\n  let count = 0\n\n  p.setup = function() {\n    p.createCanvas(width, height);\n    p.frameRate(1);\n\n    for (let i = 0; i < 10; i++) {\n      array.push(parseInt(Math.random() * 10));\n    }\n\n    console.log(JSON.stringify(array.slice(0)))\n\n    animations = [array.slice(0)];\n\n    mergeSort(array)\n  };\n\n  p.draw = function() {\n    p.background(220);\n\n    const padding = 10;\n    const itemWidth = 30;\n\n    \n    for (let j = 0; j < mem.length; j++) {\n      for (let i = 0; i < mem[j].length; i++) {\n        //p.fill(item['color']);\n        // p.rect(itemWidth * i, height - array[i], itemWidth, array[i]);\n        p.text(mem[j][i], i * itemWidth, j * itemWidth, itemWidth, itemWidth);\n      }\n    }\n  };\n};\n\nfunction splitAr(ar, path) {\n  if (ar.length === 1) {\n    return ar;\n  }\n\n  if (path.length <= 0) {\n    const middle = ar.length / 2;\n\n    return [\n      ar.slice(0, middle),\n      ar.slice(middle)\n    ];\n  }\n\n  ar[path[0]] = splitAr(ar[path[0]], path.slice(1));\n\n  return ar;\n}\n\nfunction nextPath(ar, path) {\n  let inc = false;\n\n  if (path.length === 0) {\n    if (ar.length === 0) {\n      return []\n    }\n\n    return [0]\n  }\n\n\n  path[path.length - 1] += 1;\n  if (pathIsArray(ar, path)) {\n    return path;\n  }\n\n  path[path.length - 1] = 0;\n\n  for (let i = path.length - 2; i >= 0; i--) {\n    path[i] += 1;\n    if (pathIsArray(ar, path)) {\n      return path;\n    }\n\n    path[i] = 0;\n  }\n\n  path.push(0);\n\n  if (pathIsArray(ar, path)) {\n    return path;\n  }\n\n  return undefined;\n\n  return path;\n}\n\nfunction pathIsArray(ar, path) {\n  if (!Array.isArray(ar)) {\n    return false;\n  }\n\n  for (let i = 0; i < path.length; i++) {\n    if (!ar[path[i]]) {\n      return false\n    }\n\n    ar = ar[path[i]];\n  }\n\n  return Array.isArray(ar);\n}\n\nfunction drawBar(p, ar, x, itemWidth, padding, height) {\n  for (let i = 0; i < animations[animations.length - 1].length; i++) {\n    if (Array.isArray(ar[i])) {\n      x = drawBar(p, ar[i], (x + padding), itemWidth, padding, height);\n    } else {\n      //p.fill(item['color']);\n      p.rect(x, height - ar[i], itemWidth, ar[i]);\n      x += itemWidth;\n    }\n  }\n\n  return x;\n}\n\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function mergeSort(ar, mem) {\n  if (ar.length <= 1) {\n    return ar;\n  }\n\n  // animations.pop();\n  const middle = parseInt(ar.length / 2);\n  mem.push(ar.slice(0, middle))\n  // animations.push(ar.slice(0, middle));\n\n  console.log(JSON.stringify(animations))\n\n  const [ar1, mem1] = await mergeSort(ar.slice(0, middle))\n  // animations.pop();\n  // animations.push(ar.slice(middle));\n  mem.push(ar.slice(middle))\n\n  console.log(JSON.stringify(animations))\n\n  const [ar2, mem2] = await mergeSort(ar.slice(middle))\n\n  await sleep(500);\n  \n  const newArray = await mergeArray(ar1, ar2);\n  \n  // animations.pop();\n  animations.push(newArray);\n  // console.log(JSON.stringify(animations.slice(0)))\n  await sleep(500);\n  return [newArray, mem];\n}\n\nasync function mergeArray (ar1, ar2) {\n  let newArray = [];\n  let ar1I = 0;\n  let ar2I = 0;\n\n  while(ar1.length > ar1I && ar2.length > ar2I) {\n    if (ar1[ar1I] < ar2[ar2I]) {\n      newArray.push(ar1[ar1I]);\n      ar1I++;\n    } else {\n      newArray.push(ar2[ar2I]);\n      ar2I++;\n    }\n  }\n\n  while (ar2.length > ar2I) {\n    newArray.push(ar2[ar2I]);\n    ar2I++;\n  }\n\n  while (ar1.length > ar1I) {\n    newArray.push(ar1[ar1I]);\n    ar1I++;\n  }\n\n  return newArray;\n}\n\n\n// mergeSort([2, 5, 1, 7, 4, 9])\n*/\nimport React, { Component } from \"react\";\n\nexport default class App extends Component {\n \n  render() {\n    return <div>test</div>;\n  }\n}\n\n"],"sourceRoot":""}