{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/ruby/rails/auth-api/","result":{"data":{"site":{"siteMetadata":{"title":"Kevin Ponce Blog","author":"Kevin Ponce"}},"markdownRemark":{"id":"1c6c0541-d2db-5259-87ff-840ed7f74e86","excerpt":"config/application.rb config/routes.rb .env app/models/user.rb app/controllers/api/sessions_controller.rb app/views/api/sessions/create.json.jbuilder appâ€¦","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gem &#39;devise&#39;\ngem &#39;jwt&#39;\n\ngroup :development, :test do\n  gem &#39;dotenv-rails&#39;\nend</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bin/rails generate devise:install\nbin/rails generate devise User\nbin/rails db:migrate</code></pre></div>\n<h1>config/application.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Dotenv::Railtie.load if defined?(Dotenv)</code></pre></div>\n<h1>config/routes.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">namespace :api, defaults: { format: :json } do\n    devise_for :users\nend</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bin/rails routes | grep users</code></pre></div>\n<h1>.env</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SECRET_KEY_BASE=hmmmmm</code></pre></div>\n<h1>app/models/user.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class User &lt; ApplicationRecord\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :validatable\n\n  def generate_jwt\n    JWT.encode({\n      sub: id,\n      exp: 60.days.from_now.to_i\n    }, ENV[&#39;SECRET_KEY_BASE&#39;])\n  end\nend</code></pre></div>\n<h1>app/controllers/api/sessions_controller.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># frozen_string_literal: true\n\nclass Api::SessionsController &lt; Devise::SessionsController\n  skip_before_action :verify_authenticity_token, raise: false\n  skip_before_action :verify_signed_out_user, raise: false\n  respond_to :json\n\n  def create\n    user = User.find_by_email(email_param)\n\n    if user.try(:valid_password?, password_param)\n      @current_user = user\n      cookies[:authorization] = { value: @current_user.generate_jwt, httponly: true }\n    else\n      render json: { message: &#39;email or password is invalid&#39;, errors: [] }, status: 422\n    end\n  end\n\n  def destroy\n    cookies.delete :authorization\n    render json: { message: &#39;signed out&#39; }\n  end\n\n  private\n\n  def email_param\n    params.require(:user).fetch(:email, &#39;&#39;).try(:strip).try(:downcase)\n  end\n\n  def password_param\n    params.require(:user).fetch(:password, &#39;&#39;)\n  end\n\n  def auth_token\n    request.headers[&#39;Authorization&#39;].try(:split, &#39; &#39;).try(:last) || cookies[:authorization]\n  end\nend</code></pre></div>\n<h1>app/views/api/sessions/create.json.jbuilder</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">json.user do |json|\n  json.token      @current_user.generate_jwt\n  json.id         @current_user.id\n  json.email      @current_user.email\n  json.updated_at @current_user.updated_at\n  json.created_at @current_user.created_at\nend</code></pre></div>\n<h1>app/controllers/api/passwords_controller.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Api::PasswordsController &lt; Devise::PasswordsController\n  skip_before_action :verify_authenticity_token, raise: false\n  respond_to :json\n\n  def create\n    missing_email and return if email_param.blank?\n\n    user = User.find_by(email: email_param)\n    if user\n      raw, enc = Devise.token_generator.generate(User, :reset_password_token)\n      user.reset_password_token = enc\n      user.reset_password_sent_at = Time.now.utc\n\n      if user.save\n        # TODO: send email to user.email with reset password url  &quot;/users/reset-password/#{user.id}/#{raw}&quot;\n        \n      else\n        render_error user.errors\n        return\n      end\n    end\n\n    render json: { message: &#39;Please check your email&#39; }\n  end\n\n  def update\n    token = Devise.token_generator.digest(User, :reset_password_token, reset_password_token_param)\n    @user = User.find_by({ id: user_id })\n    user_not_found and return unless @user\n\n    invalid_reset_token and return if @user.reset_password_token != token\n    invalid_reset_token and return if @user.nil?\n\n    password_confirmation_does_not_match and return if password_param != password_confirmation_param\n\n    @user.password = password_param\n    unless @user.save\n      render_error @user.errors\n    end\n\n    cookies[:authorization] = { value: @user.generate_jwt, httponly: true }\n  end\n\n  private\n\n  def email_param\n    params.require(:user).fetch(:email)\n  end\n\n  def reset_password_token_param\n    params.require(:user).fetch(:reset_password_token)\n  end\n\n  def user_id\n    params.require(:user).fetch(:id)\n  end\n\n  def password_param\n    params.require(:user).fetch(:password)\n  end\n\n  def password_confirmation_param\n    params.require(:user).fetch(:password_confirmation)\n  end\n\n  def missing_email\n    render json: { message: &#39;Please provide an email address&#39;, errors: [] }, status: 422\n  end\n\n  def invalid_reset_token\n    render json: { message: &#39;Invalid reset token&#39;, errors: [] }, status: 422\n  end\n\n  def user_not_found\n    render json: { message: &#39;User not found&#39; }, status: 404\n  end\n\n  def password_confirmation_does_not_match\n    render json: { message: &#39;Password does not match password confirmation&#39;, errors: [] }, status: 422\n  end\nend</code></pre></div>\n<h1>app/views/api/passwords/update.json.jbuilder</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">json.user do |json|\n  json.id         @user.id\n  json.email      @user.email\n  json.updated_at @user.updated_at\n  json.created_at @user.created_at\nend</code></pre></div>\n<h1>app/controllers/api/registrations_controller.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># frozen_string_literal: true\n\nclass Api::RegistrationsController &lt; Devise::RegistrationsController\n  skip_before_action :verify_authenticity_token, raise: false\n\n  respond_to :json\n\n  def create\n    build_resource(registration_params)\n\n    if resource.save\n      @current_user = resource\n      cookies[:authorization] = { value: @current_user.generate_jwt, httponly: true }\n    else\n      render_error resource.errors\n    end\n  end\n\n  private\n\n  def registration_params\n    params.require(:user).permit(:email,\n                                 :password,\n                                 :password_confirmation)\n  end\n\n  def render_error(errors)\n    render json: {\n      errors: errors.messages.map { |id, err| { field: id.to_s, message: err.to_sentence } },\n      message: errors.full_messages.to_sentence\n    }, status: 422\n  end\nend</code></pre></div>\n<h1>app/views/api/registrations/create.json.jbuilder</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">json.user do |json|\n  json.token      @current_user.generate_jwt\n  json.id         @current_user.id\n  json.email      @current_user.email\n  json.updated_at @current_user.updated_at\n  json.created_at @current_user.created_at\nend</code></pre></div>\n<h1>app/controllers/application_controller.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># frozen_string_literal: true\n\nclass ApplicationController &lt; ActionController::Base\n  helper_method :current_user\n\n  def auth_token\n    request.headers[&#39;Authorization&#39;].try(:split, &#39; &#39;).try(:last) || cookies[:authorization]\n  end\n\n  def require_auth\n    render status: 401, json: { message: &#39;Please sign in&#39; } unless current_user\n  end\n\n  def current_user\n    @current_user ||= User.find_by(id: @current_user_id)\n  end\n\n  def authenticate_user!\n    return unless auth_token\n    unless AuthToken.find_by(auth_token: auth_token).try(:active)\n      render status: 401, json: { message: &#39;Please sign in&#39; }\n      return\n    end\n\n    begin\n      jwt_payload = JWT.decode(auth_token, ENV[&#39;SECRET_KEY_BASE&#39;]).first\n\n      @current_user_id = jwt_payload[&#39;sub&#39;]\n    rescue JWT::ExpiredSignature, JWT::VerificationError, JWT::DecodeError\n      render status: 401, json: { message: &#39;Please sign in&#39; }\n    end\n  end\n\n  def signed_in?\n    @current_user_id.present?\n  end\nend</code></pre></div>\n<h1>app/controllers/api_controller.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ApiController &lt; ApplicationController\n    before_action :authenticate_user!\n    skip_before_action :verify_authenticity_token, raise: false\n\n   def require_auth\n    return if current_user\n\n    render status: 401, json: { message: &#39;Please sign in&#39; }\n  end\nend</code></pre></div>\n<h1>app/controllers/api/example_controller.rb</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Api::ExampleController &lt; ApiController\n  def index\n    render json: { user: current_user }\n  end\nend</code></pre></div>","frontmatter":{"title":"Rails Api Auth","date":"August 07, 2019","description":"How to add search to ruby on rails using Algolia which will simply search queries and speed up search results.","author":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ruby/rails/auth-api/","previous":{"fields":{"slug":"/gatsby/add-tags/"},"frontmatter":{"title":"Add Tags to Gatsby","tags":["javascript","gatsby"]}},"next":{"fields":{"slug":"/ruby/rails/using-routes-in-active-record/"},"frontmatter":{"title":"Using routes in active record","tags":["ruby"]}}}}}