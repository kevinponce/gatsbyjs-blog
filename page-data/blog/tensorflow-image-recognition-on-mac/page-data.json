{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/tensorflow-image-recognition-on-mac/","webpackCompilationHash":"4345e2f2e96b614a424f","result":{"data":{"site":{"siteMetadata":{"title":"Kevin Ponce Blog","author":"Kevin Ponce"}},"markdownRemark":{"id":"a72e396b-559d-567d-b40e-0e48a8d13002","excerpt":"Here is a simple tutorial on getting tensorflow zoo models image recognition. Install Tensorflow I had a hard time setting up tensorflow-gpu.\nIf you are using aâ€¦","html":"<p>Here is a simple tutorial on getting tensorflow zoo models image recognition.</p>\n<h3>Install Tensorflow</h3>\n<p>I had a hard time setting up tensorflow-gpu.\nIf you are using a mac, I would recomend using tensorflow cpu instead.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip3 install tensorflow</code></pre></div>\n<h3>Install Protobuf</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install protobuf</code></pre></div>\n<h3>Set up tensorflow models</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd ~/\n$ mkdir tensorflow-models\n$ cd tensorflow-models/\n$ git clone --recurse-submodules https://github.com/tensorflow/models.git</code></pre></div>\n<h3>Download zoo models</h3>\n<p>Go to: <code class=\"language-text\">https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md</code>\ncopy the link to ssd<em>mobilenet</em>v1_coco</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl link-from-about -O\n$ tar -xzvf file-download-above\n$ cd ~/tensorflow-modesl/models/research\n$ protoc object_detection/protos/*.proto --python_out=.</code></pre></div>\n<h3>Add tensorflow models to PYTHONPATH</h3>\n<p>Since I am running python through pyenv, I will manually run the following command in the terminal instead of adding it to <code class=\"language-text\">~/.bashrc</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ export PYTHONPATH=$PYTHONPATH:/Users/kevinponce/Programming/tensorflow-models/models/research:/Users/kevinponce/Programming/tensorflow-modelsmodels/research/slim</code></pre></div>\n<h3>Create image detection python script</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd ~/tensorflow-modeslmodels/research/object_detection/\n$ touch play_object_detection.py\n$ sudo vim play_object_detection.py</code></pre></div>\n<p>Save the following code to <code class=\"language-text\">play_object_detection.py</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Import packages</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token comment\"># Set up camera constants</span>\nIM_WIDTH <span class=\"token operator\">=</span> <span class=\"token number\">1280</span>\nIM_HEIGHT <span class=\"token operator\">=</span> <span class=\"token number\">720</span>\n\n<span class=\"token comment\"># This is needed since the working directory is the object_detection folder.</span>\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Import utilites</span>\n<span class=\"token keyword\">from</span> utils <span class=\"token keyword\">import</span> label_map_util\n<span class=\"token keyword\">from</span> utils <span class=\"token keyword\">import</span> visualization_utils <span class=\"token keyword\">as</span> vis_util\n\n<span class=\"token comment\"># Name of the directory containing the object detection module we're using</span>\nMODEL_NAME <span class=\"token operator\">=</span> <span class=\"token string\">'yawn/inference_graph'</span>\n\n\n<span class=\"token comment\"># Grab path to current working directory</span>\nCWD_PATH <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Path to frozen detection graph .pb file, which contains the model that is used</span>\n<span class=\"token comment\"># for object detection.</span>\nPATH_TO_CKPT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CWD_PATH<span class=\"token punctuation\">,</span>MODEL_NAME<span class=\"token punctuation\">,</span><span class=\"token string\">'frozen_inference_graph.pb'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Path to label map file</span>\nPATH_TO_LABELS <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CWD_PATH<span class=\"token punctuation\">,</span><span class=\"token string\">'yawn'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'labelmap.pbtxt'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Number of classes the object detector can identify</span>\nNUM_CLASSES <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">## Load the label map.</span>\n<span class=\"token comment\"># Label maps map indices to category names, so that when the convolution</span>\n<span class=\"token comment\"># network predicts `5`, we know that this corresponds to `airplane`.</span>\n<span class=\"token comment\"># Here we use internal utility functions, but anything that returns a</span>\n<span class=\"token comment\"># dictionary mapping integers to appropriate string labels would be fine</span>\nlabel_map <span class=\"token operator\">=</span> label_map_util<span class=\"token punctuation\">.</span>load_labelmap<span class=\"token punctuation\">(</span>PATH_TO_LABELS<span class=\"token punctuation\">)</span>\ncategories <span class=\"token operator\">=</span> label_map_util<span class=\"token punctuation\">.</span>convert_label_map_to_categories<span class=\"token punctuation\">(</span>label_map<span class=\"token punctuation\">,</span> max_num_classes<span class=\"token operator\">=</span>NUM_CLASSES<span class=\"token punctuation\">,</span> use_display_name<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ncategory_index <span class=\"token operator\">=</span> label_map_util<span class=\"token punctuation\">.</span>create_category_index<span class=\"token punctuation\">(</span>categories<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Load the Tensorflow model into memory.</span>\ndetection_graph <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> detection_graph<span class=\"token punctuation\">.</span>as_default<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    od_graph_def <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>GraphDef<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> tf<span class=\"token punctuation\">.</span>gfile<span class=\"token punctuation\">.</span>GFile<span class=\"token punctuation\">(</span>PATH_TO_CKPT<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fid<span class=\"token punctuation\">:</span>\n        serialized_graph <span class=\"token operator\">=</span> fid<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        od_graph_def<span class=\"token punctuation\">.</span>ParseFromString<span class=\"token punctuation\">(</span>serialized_graph<span class=\"token punctuation\">)</span>\n        tf<span class=\"token punctuation\">.</span>import_graph_def<span class=\"token punctuation\">(</span>od_graph_def<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n    sess <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span>graph<span class=\"token operator\">=</span>detection_graph<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># Define input and output tensors (i.e. data) for the object detection classifier</span>\n\n<span class=\"token comment\"># Input tensor is the image</span>\nimage_tensor <span class=\"token operator\">=</span> detection_graph<span class=\"token punctuation\">.</span>get_tensor_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'image_tensor:0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Output tensors are the detection boxes, scores, and classes</span>\n<span class=\"token comment\"># Each box represents a part of the image where a particular object was detected</span>\ndetection_boxes <span class=\"token operator\">=</span> detection_graph<span class=\"token punctuation\">.</span>get_tensor_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'detection_boxes:0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Each score represents level of confidence for each of the objects.</span>\n<span class=\"token comment\"># The score is shown on the result image, together with the class label.</span>\ndetection_scores <span class=\"token operator\">=</span> detection_graph<span class=\"token punctuation\">.</span>get_tensor_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'detection_scores:0'</span><span class=\"token punctuation\">)</span>\ndetection_classes <span class=\"token operator\">=</span> detection_graph<span class=\"token punctuation\">.</span>get_tensor_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'detection_classes:0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Number of objects detected</span>\nnum_detections <span class=\"token operator\">=</span> detection_graph<span class=\"token punctuation\">.</span>get_tensor_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'num_detections:0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Initialize frame rate calculation</span>\nframe_rate_calc <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nfreq <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>getTickFrequency<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfont <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>FONT_HERSHEY_SIMPLEX\n\n\n<span class=\"token comment\"># Initialize USB webcam feed</span>\ncamera <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nret <span class=\"token operator\">=</span> camera<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>IM_WIDTH<span class=\"token punctuation\">)</span>\nret <span class=\"token operator\">=</span> camera<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>IM_HEIGHT<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t1 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>getTickCount<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Acquire frame and expand frame dimensions to have shape: [1, None, None, 3]</span>\n    <span class=\"token comment\"># i.e. a single-column array, where each item in the column has the pixel RGB value</span>\n    ret<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> camera<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    frame_expanded <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Perform the actual detection by running the model with the image as input</span>\n    <span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> scores<span class=\"token punctuation\">,</span> classes<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>detection_boxes<span class=\"token punctuation\">,</span> detection_scores<span class=\"token punctuation\">,</span> detection_classes<span class=\"token punctuation\">,</span> num_detections<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>image_tensor<span class=\"token punctuation\">:</span> frame_expanded<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Draw the results of the detection (aka 'visulaize the results')</span>\n    vis_util<span class=\"token punctuation\">.</span>visualize_boxes_and_labels_on_image_array<span class=\"token punctuation\">(</span>\n        frame<span class=\"token punctuation\">,</span>\n        np<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        np<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        np<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        category_index<span class=\"token punctuation\">,</span>\n        use_normalized_coordinates<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        line_thickness<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        min_score_thresh<span class=\"token operator\">=</span><span class=\"token number\">0.85</span><span class=\"token punctuation\">)</span>\n\n    cv2<span class=\"token punctuation\">.</span>putText<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span><span class=\"token string\">\"FPS: {0:.2f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>frame_rate_calc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>font<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>LINE_AA<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># All the results have been drawn on the frame, so it's time to display it.</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'Object detector'</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span>\n\n    t2 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>getTickCount<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t2<span class=\"token operator\">-</span>t1<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>freq\n    frame_rate_calc <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span>time1\n\n    <span class=\"token comment\"># Press 'q' to quit</span>\n    <span class=\"token keyword\">if</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n\ncamera<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now run the script!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python3 play_object_detection.py</code></pre></div>\n<p>Press q when you are complete</p>\n<p>Voila</p>","frontmatter":{"title":"Tensorflow image recognition on mac","date":"August 03, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tensorflow-image-recognition-on-mac/","previous":{"fields":{"slug":"/creating-blog-with-gatsby/"},"frontmatter":{"title":"Creating blog with Gatsby","tags":["javascript","gatsby"]}},"next":{"fields":{"slug":"/rails-export-import-users/"},"frontmatter":{"title":"Rails export/import users","tags":["ruby","ruby-on-rails"]}}}}}