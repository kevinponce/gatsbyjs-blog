{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/dc-motor-encode-precisely/","result":{"data":{"site":{"siteMetadata":{"title":"Kevin Ponce Blog","author":"Kevin Ponce"}},"markdownRemark":{"id":"e062e0b8-66a0-5db7-be8a-b4c1c439d499","excerpt":"Here is a snippet of code that allows a 12V DC motor with a Hall Effect Quadrature Encoder to precisely move using an arduino. Before you can use the code, youâ€¦","html":"<p>Here is a snippet of code that allows a 12V DC motor with a Hall Effect Quadrature Encoder to precisely move using an arduino.</p>\n<p>Before you can use the code, you must install PIDController library by doing the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* Click sketch\n* Select Include Librart\n* Select Manage Libraies...\n* Install PIDController</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/* Wiring:\n * 12V Geared DC motor with Hall Effect Quadrature Encoder\n * Hall Sensor B Vout -&gt; Arduino  D2\n * Hall Sensor A Vout -&gt; Arduino  D3\n * Hall Sensor Vcc -&gt; 12 Volt Power Supply\n * Hall Sensor GND -&gt; GND\n * Motor- -&gt; L298N Out3\n * Motor+ -&gt; L298N Out4\n * \n * L298N Motor Driver\n * L298N Out3 -&gt; Motor-\n * L298N Out4 -&gt; Motor+\n * L298N IN3 -&gt; Arduino 9\n * L298N IN2 -&gt; Arduino 10\n * L298N 12V+ -&gt; 12 Volt Power Supply\n * L298N GND -&gt; GND\n * \n * 5 Lead Pot\n * POT LEFT to RIGHT leads facing you\n * POT LEAD 0 -&gt; N/A\n * POT LEAD 1 -&gt; GND\n * POT LEAD 2 -&gt; Arduino A0\n * POT LEAD 3 -&gt; Arduino 5V\n * POT LEAD 4 -&gt; N/A\n */  \n \n#include &lt;PIDController.h&gt;\n\n#define encoderA 2\n#define encoderB 3\n#define motorA 9\n#define motorB 10\n\nvolatile long int encoder_pos = 0;\nPIDController pos_pid;\nint motor_value = 255;\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(encoderA, INPUT);\n  pinMode(encoderB, INPUT);\n  pinMode(motorA, OUTPUT);\n  pinMode(motorB, OUTPUT);\n  attachInterrupt(digitalPinToInterrupt(2), encoder, RISING);\n\n  pos_pid.begin();    \n  pos_pid.tune(20, 0, 200);    \n  pos_pid.limit(-255, 255);\n}\n\nvoid loop() {\n  pos_pid.setpoint((int)(((float)analogRead(A0)/1023) * 374.0 *1));\n  motor_value = pos_pid.compute(encoder_pos);\n\n  if (motor_value &gt; 0) {\n    MotorCounterClockwise(motor_value);\n  } else {\n    MotorClockwise(abs(motor_value));\n  }\n\n  Serial.println(encoder_pos);\n  delay(2);\n}\n\nvoid encoder() {\n  if (digitalRead(3) == HIGH) {\n    encoder_pos++;\n  } else {\n    encoder_pos--;\n  }\n}\n\nvoid MotorClockwise(int power){\n  if (power &gt; 50) {\n    analogWrite(9, power);\n    digitalWrite(10, LOW);\n  } else {\n    digitalWrite(9, LOW);\n    digitalWrite(10, LOW);\n  }\n}\n\nvoid MotorCounterClockwise(int power) {\n  if (power &gt; 50) {\n    analogWrite(10, power);\n    digitalWrite(9, LOW);\n  } else {\n    digitalWrite(9, LOW);\n    digitalWrite(10, LOW);\n  }\n}</code></pre></div>","frontmatter":{"title":"DC motor encode precisely","date":"November 13, 2020","description":"List branch sort by commit date","author":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/dc-motor-encode-precisely/","previous":{"fields":{"slug":"/reformat-sd-card/"},"frontmatter":{"title":"Reformat SD Card","tags":["3dprint"]}},"next":null}}}