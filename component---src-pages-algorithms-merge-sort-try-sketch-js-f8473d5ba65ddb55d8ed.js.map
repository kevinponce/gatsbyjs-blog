{"version":3,"sources":["webpack:///./src/pages/algorithms/mergeSortTrySketch.js"],"names":["App","render","Component"],"mappings":"uKAsMqBA,E,gLAEnBC,OAAA,WACE,OAAO,sC,GAHsBC","file":"component---src-pages-algorithms-merge-sort-try-sketch-js-f8473d5ba65ddb55d8ed.js","sourcesContent":["/*\nfunction randomColor(p) {\n  const colors = [p.color(105,210,231), p.color(249,212,35), p.color(243,134,48), p.color(255,78,80)];\n\n  return colors[parseInt((colors.length)* Math.random())];\n}\n\nexport default function(p) {\n  const height = 420;\n  const width = 700;\n  let array = [];\n  let path = []\n  let count = 0\n\n  p.setup = function() {\n    p.createCanvas(width, height);\n    p.frameRate(1);\n\n    for (let i = 0; i < 10; i++) {\n      array.push({\n        value: parseInt(Math.random() * (height - 10)),\n        color: randomColor(p)\n      });\n    }\n  };\n\n  p.draw = function() {\n    p.background(220);\n\n    const padding = 10;\n    const itemWidth = calcItemWidth(array, width, padding);\n    drawBar(p, array, (padding / 2), itemWidth, padding, height);\n    \n    if (path) {\n      array = splitAr(array, path);\n      path = nextPath(array, path);\n    }\n  };\n};\n\nfunction splitAr(ar, path) {\n  if (ar.length === 1) {\n    return ar;\n  }\n\n  if (path.length <= 0) {\n    const middle = ar.length / 2;\n\n    return [\n      ar.slice(0, middle),\n      ar.slice(middle)\n    ];\n  }\n\n  ar[path[0]] = splitAr(ar[path[0]], path.slice(1));\n\n  return ar;\n}\n\nfunction nextPath(ar, path) {\n  let inc = false;\n\n  if (path.length === 0) {\n    if (ar.length === 0) {\n      return []\n    }\n\n    return [0]\n  }\n\n\n  path[path.length - 1] += 1;\n  if (pathIsArray(ar, path)) {\n    return path;\n  }\n\n  path[path.length - 1] = 0;\n\n  for (let i = path.length - 2; i >= 0; i--) {\n    path[i] += 1;\n    if (pathIsArray(ar, path)) {\n      return path;\n    }\n\n    path[i] = 0;\n  }\n\n  path.push(0);\n\n  if (pathIsArray(ar, path)) {\n    return path;\n  }\n\n  return undefined;\n\n  return path;\n}\n\nfunction pathIsArray(ar, path) {\n  if (!Array.isArray(ar)) {\n    return false;\n  }\n\n  for (let i = 0; i < path.length; i++) {\n    if (!ar[path[i]]) {\n      return false\n    }\n\n    ar = ar[path[i]];\n  }\n\n  return Array.isArray(ar);\n}\n\nfunction drawBar(p, ar, x, itemWidth, padding, height) {\n  for (let i = 0; i < ar.length; i++) {\n    if (Array.isArray(ar[i])) {\n      x = drawBar(p, ar[i], (x + padding), itemWidth, padding, height);\n    } else {\n      let item = ar[i];\n\n      p.fill(item['color']);\n      p.rect(x, height - item['value'], itemWidth, item['value']);\n      x += itemWidth;\n    }\n  }\n\n  return x;\n}\n\nfunction numberOfItems(ar) {\n  let count = 0;\n\n  for (let i = 0; i < ar.length; i++) {\n    if (Array.isArray(ar[i])) {\n      count += numberOfItems(ar[i]);\n    } else {\n      count++;\n    }\n  }\n\n  return count;\n}\n\nfunction numberOfPadding(ar) {\n  let count = 1;\n\n  for (let i = 0; i < ar.length; i++) {\n    if (Array.isArray(ar[i])) {\n      count += numberOfPadding(ar[i]);\n    }\n  }\n\n  return count;\n}\n\nfunction calcItemWidth(ar, canvasWidth, padding) {\n  return (canvasWidth - (numberOfPadding(ar) * padding)) / numberOfItems(ar);\n}\n\nfunction mergeSort(ar) {\n  if (ar.length <= 1) {\n    return ar;\n  }\n\n  const middle = parseInt(ar.length / 2);\n  const ar1 = mergeSort(ar.slice(0, middle))\n  const ar2 = mergeSort(ar.slice(middle))\n  \n  return mergeArray(ar1, ar2)\n}\n\nfunction mergeArray(ar1, ar2) {\n  let newArray = [];\n  let ar1I = 0;\n  let ar2I = 0;\n\n  while(ar1.length > ar1I || ar2.length > ar2I) {\n    if (ar1.length <= ar1I) {\n      newArray.push(ar2[ar2I]);\n      ar2I++;\n    } else if (ar2.length <= ar2I) {\n      newArray.push(ar1[ar1I]);\n      ar1I++;\n    } else if (ar1[ar1I] < ar2[ar2I]) {\n      newArray.push(ar1[ar1I]);\n      ar1I++;\n    } else {\n      newArray.push(ar2[ar2I]);\n      ar2I++;\n    }\n  }\n\n  return newArray;\n}\n*/\nimport React, { Component } from \"react\";\n\nexport default class App extends Component {\n \n  render() {\n    return <div>test</div>;\n  }\n}\n"],"sourceRoot":""}